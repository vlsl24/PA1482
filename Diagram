'!include style.pu
@startuml diagramName

'class Actions {
'    string[] info()
 '   recieveInfo()
 '   action()
'}


class Logflightcode {
    '-flightcode()
}

class TrackRoute {
    '-route()
}

class NotifyFighterCommand {
    '-airplane()
}

'Actions --> Logflightcode: > flightcode
'Actions --> TrackRoute: > route
'Actions --> NotifyFighterCommand: > airplane

together {
class AircraftFactory
class ActionCollection
}

together {
class AircraftCollection
class Tornsvalla
}



class Tornsvalla{
    createAircraft()
    getAircraftInfo()
}

class AircraftCollection {
    -aircraftList: List<Aircraft>
    +addAircraft()
    +removeAircraft()
    +getAircraftInfo(tailCode)
    +getAllAircraftInfo()
}


class Aircraft {
    -fullName
    -shortName
    -lastSeen
    -tailCode
    -Lista<Action>
    +String[] info()
    +doActions()
    +setActions()
}

abstract Action {
    +action() = 0
}

Tornsvalla --> AircraftCollection: > tailcode, type
'Actions <-- AircraftFactory: < aircraft data
AircraftCollection <-- AircraftFactory: < Aircraft
AircraftFactory --> Aircraft



Logflightcode --|> Action
TrackRoute --|> Action
NotifyFighterCommand --|> Action

class ActionCollection {
    +createAction()
}
ActionCollection -->Logflightcode
ActionCollection -->TrackRoute
ActionCollection -->NotifyFighterCommand

ActionCollection <|-- AircraftFactory

class terminal{

    user_input

}
Tornsvalla <-- terminal

@enduml
